<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hx.Gateway.Core</name>
    </assembly>
    <members>
        <member name="T:Hx.Gateway.Core.Entity.AuditedEntityBase">
            <summary>
            带有更新信息的实体(非泛型，默认主键为雪花id)
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.AuditedEntityBase.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.AuditedEntityBase.UpdaterId">
            <summary>
            更新者id
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.BasePageParam">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.BasePageParam.PageSize">
            <summary>
            每页多少条数据
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.BasePageParam.Page">
            <summary>
            当前页码
            默认从第一页开始
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.BasePageParam.SortField">
            <summary>
            排序的字段
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.BasePageParam.OrderType">
            <summary>
            0 正序 1倒序
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.OrderTypeEnum">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:Hx.Gateway.Core.Entity.OrderTypeEnum.ASC">
            <summary>
            正序
            </summary>
        </member>
        <member name="F:Hx.Gateway.Core.Entity.OrderTypeEnum.DESC">
            <summary>
            倒序
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.CreationEntityBase">
            <summary>
            带有创建信息的实体
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.CreationEntityBase.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.CreationEntityBase.CreatorId">
            <summary>
            创建者Id
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.EntityBase">
            <summary>
            框架实体基类Id
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.EntityBase.Id">
            <summary>
            雪花Id
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.FullAuditedEntityBase">
            <summary>
            带有状态数据的实体（非泛型）
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.FullAuditedEntityBase.IsDeleted">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.FullAuditedEntityBase.DeleterId">
            <summary>
            删除人id
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.FullAuditedEntityBase.DeleteTime">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.IEntity`1">
            <summary>
            实体接口
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.IEntity`1.Id">
            <summary>
            主键id
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.TgGlobalConfiguration">
             <summary>
             全局配置表
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.ProjectId">
             <summary>
             项目Id 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.Name">
             <summary>
             全局配置名称 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.BaseUrl">
             <summary>
             基础地址 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.RequestIdKey">
             <summary>
             请求ID 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.DownstreamScheme">
             <summary>
             Http协议（http,https） 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.DownstreamHttpVersion">
             <summary>
             Http版本（1.0，1.1，2.0） 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.LoadBalancerOptions">
             <summary>
             负载均衡
            </summary>
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.LoadBalancerOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.HttpHandlerOptions">
             <summary>
             HttpHandler配置 
            </summary>   
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.HttpHandlerOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.QoSOptions">
             <summary>
             服务质量控制
            </summary>
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.QoSOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.RateLimitOptions">
             <summary>
             全局限流配置 
            </summary>
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.GlobalRateLimitOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.ServiceDiscoveryProviderOptions">
            <summary>
            服务发现代理配置
            </summary>
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.ServiceDiscoveryProviderOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgGlobalConfiguration.Status">
             <summary>
             状态
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.TgProject">
             <summary>
             项目表
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgProject.Code">
             <summary>
             项目编码
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgProject.Name">
             <summary>
             项目名称 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgProject.SortIndex">
             <summary>
             排序字段 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgProject.Status">
             <summary>
             状态字段 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgProject.Routes">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.TgRoute">
             <summary>
             路由表
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.ProjectId">
             <summary>
             项目Id 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.DownstreamPathTemplate">
             <summary>
             下游的路由模板，即真实处理请求的路径模板 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.UpstreamPathTemplate">
             <summary>
             上游请求的模板，即用户真实请求的链接 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.UpstreamHttpMethod">
             <summary>
             上游请求的http方法（数组：GET、POST、PUT） 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.DownstreamHttpMethod">
             <summary>
             下游请求的http方法（数组：GET、POST、PUT） 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.DownstreamHttpVersion">
             <summary>
              下游Http版本 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.RequestIdKey">
             <summary>
              请求Id 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.RouteIsCaseSensitive">
             <summary>
              开启上下游路由模板大小写匹配 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.ServiceName">
             <summary>
              服务名 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.ServiceNamespace">
             <summary>
              服务命名空间 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.DownstreamScheme">
             <summary>
             请求的方式，如：http,htttps 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.FileCacheOptions">
             <summary>
             缓存配置
            </summary>
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.FileCacheOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.QoSOptions">
            <summary>
            服务质量
            </summary>
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.QoSOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.LoadBalancerOptions">
             <summary>
              负载均衡
            </summary>
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.LoadBalancerOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.RateLimitOptions">
             <summary>
             限制配置
            </summary>
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.RateLimitOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.AuthenticationOptions">
             <summary>
              身份认证
            </summary>
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.AuthenticationOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.HttpHandlerOptions">
             <summary>
              HttpHandler配置
            </summary>
            <see cref="T:Hx.Gateway.Core.Options.Ocelot.HttpHandlerOptions"/>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.UpstreamHost">
             <summary>
              该特性允许您拥有基于上游主机的路由。
              它的工作原理是查看客户端使用的主机头，然后将其作为我们用来标识路由的信息的一部分
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.DelegatingHandlers">
             <summary>
              委托处理程序，需要实现DelegatingHandler类
              数组[ "FakeHandlerTwo", "FakeHandler"]
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.Priority">
             <summary>
              你可以通过在ocelot.json中包含“Priority”属性来定义你想要的路由匹配Upstream HttpRequest的顺序
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.DangerousAcceptAnyServerCertificateValidator">
             <summary>
             评估危险服务验证 
             如果要忽略SSL警告/错误，请在路由配置中设置以下参数
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.Status">
             <summary>
              状态
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.DownstreamHostAndPorts">
            <summary>
            路由地址配置
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRoute.RouteProperties">
            <summary>
            路由属性
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.TgRouteHostPort">
             <summary>
             路由地址配置表
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRouteHostPort.Host">
             <summary>
              路由主机
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRouteHostPort.Port">
             <summary>
              端口
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRouteHostPort.RouteId">
             <summary>
             路由Id 
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.TgRouteProperty">
             <summary>
             路由属性表
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRouteProperty.Key">
             <summary>
              
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRouteProperty.Value">
             <summary>
              
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRouteProperty.RouteId">
             <summary>
             路由Id 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgRouteProperty.Type">
             <summary>
              
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Entity.TgUserAccount">
             <summary>
             用户表
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgUserAccount.Account">
             <summary>
             账户
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgUserAccount.Password">
             <summary>
             密码
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgUserAccount.OpenId">
            <summary>
            OpenId
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgUserAccount.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Entity.TgUserAccount.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.StatusEnum">
            <summary>
            通用状态枚举
            </summary>
        </member>
        <member name="F:Hx.Gateway.Core.StatusEnum.Enable">
            <summary>
            启用
            </summary>
        </member>
        <member name="F:Hx.Gateway.Core.StatusEnum.Disable">
            <summary>
            停用
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.EnumExtension">
            <summary>
            枚举扩展
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.EnumExtension.GetDescription(System.Enum)">
            <summary>
             获取枚举的中文描述
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type">类型</param>
            <param name="generic">泛型类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.ToQueryString(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            将字典转化为QueryString格式
            </summary>
            <param name="dict"></param>
            <param name="urlEncode"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.UrlEncode(System.String)">
            <summary>
            将字符串URL编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.ToJson(System.Object)">
            <summary>
            对象序列化成Json字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.ToObject``1(System.String)">
            <summary>
            Json字符串反序列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.ParseToLong(System.Object)">
            <summary>
            将object转换为long，若失败则返回0
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.ParseToLong(System.String,System.Int64)">
            <summary>
            将object转换为long，若失败则返回指定值
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.ParseToDouble(System.Object)">
            <summary>
            将object转换为double，若失败则返回0
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.ParseToDouble(System.Object,System.Double)">
            <summary>
            将object转换为double，若失败则返回指定值
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.ParseToDateTime(System.String)">
            <summary>
            将string转换为DateTime，若失败则返回日期最小值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.ParseToDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            将string转换为DateTime，若失败则返回默认值
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ObjectExtension.IsNullOrEmpty(System.Object)">
            <summary>
            判断是否有值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Gateway.Core.Options.DbConnectionConfig">
            <summary>
            数据库连接配置
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.DbConnectionConfig.EnableInitDb">
            <summary>
            启用库表初始化
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.DbConnectionConfig.EnableInitSeed">
            <summary>
            启用种子初始化
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.DbConnectionConfig.EnableUnderLine">
            <summary>
            启用驼峰转下划线
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.DbConnectionConfig.EnableSqlLog">
            <summary>
            启用Sql日志记录
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.OcelotSettingsOptions.ProjectCode">
            <summary>
            项目编码
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.OcelotSettingsOptions.EnableTimer">
            <summary>
            是否启用定时器，默认不启动
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.OcelotSettingsOptions.TimerDelay">
            <summary>
            定时器周期，单位（毫秒），默认30分总自动更新一次
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.OcelotSettingsOptions.ClusterEnvironment">
            <summary>
            是否启用集群环境，如果非集群环境直接本地缓存+数据库即可
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.OcelotSettingsOptions.ClientAuthorization">
            <summary>
            是否启用客户端授权,默认不开启
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.OcelotSettingsOptions.CacheTime">
            <summary>
            服务器缓存时间，默认30分钟
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.OcelotSettingsOptions.ClientKey">
            <summary>
            客户端标识，默认 client_id
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.OcelotSettingsOptions.ClientRateLimit">
            <summary>
            是否开启自定义限流，默认不开启
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.OcelotSettingsOptions.DbConnectionConfig">
            <summary>
            数据库连接配置
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.AuthenticationOptions">
            <summary>
            为了验证路由，然后使用Ocelot的任何基于声明的功能，如授权或使用令牌的值修改请求。
            用户必须像往常一样在他们的Startup.cs中注册身份验证服务，
            但每次注册时都提供一个方案(身份验证提供者密钥)。
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.AuthenticationOptions.AuthenticationProviderKey">
            <summary>
            当Ocelot运行时，它会查看这个AuthenticationProviderKey并检查是否有一个使用给定密钥注册的身份验证提供程序。
            如果没有，那么Ocelot将不会启动，如果有，那么Route将在执行时使用该提供程序
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.AuthenticationOptions.AllowedScopes">
            <summary>
            允许的范围
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.DownstreamHostAndPortOptions">
            <summary>
            它定义希望向其转发请求的任何下游服务的主机和端口。
            通常这将只包含一个条目，但有时你可能想要负载平衡请求到你的下游服务，
            Ocelot允许你添加多个条目，然后选择负载均衡器。
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.DownstreamHostAndPortOptions.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.DownstreamHostAndPortOptions.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.FileCacheOptions">
            <summary>
            Ocelot目前支持CacheManager项目提供的一些非常基本的缓存。
            这是一个了不起的项目，解决了很多缓存问题。我
            建议使用这个包来缓存Ocelot
            Install-Package Ocelot.Cache.CacheManager
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.FileCacheOptions.TtlSeconds">
            <summary>
            如设置为15，这意味着缓存将在15秒后过期
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.FileCacheOptions.Region">
            <summary>
            区域
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.GlobalRateLimitOptions">
            <summary>
            全局限流配置
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.GlobalRateLimitOptions.DisableRateLimitHeaders">
            <summary>
            该值指定是否禁用X-Rate-Limit和Retry-After报头
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.GlobalRateLimitOptions.QuotaExceededMessage">
            <summary>
            此值指定超过的消息
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.GlobalRateLimitOptions.HttpStatusCode">
            <summary>
            此值指定限速发生时返回的HTTP状态码
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.GlobalRateLimitOptions.ClientIdHeader">
            <summary>
            允许您指定应用于标识客户端的标头。默认情况下是" ClientId "
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.HttpHandlerOptions">
            <summary>
            使用路由配置中的HttpHandlerOptions设置HttpHandler行为
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.HttpHandlerOptions.AllowAutoRedirect">
            <summary>
            AllowAutoRedirect是一个指示请求是否应该遵循重定向响应的值。
            如果请求应该自动跟随来自下游资源的重定向响应，
            则将其设置为true;否则错误。默认值为false
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.HttpHandlerOptions.UseCookieContainer">
            <summary>
            UseCookieContainer是一个值，指示处理程序是否使用cookie econtainer属性存储服务器cookie，并在发送请求时使用这些cookie。默认值为false。请注意，如果您正在使用CookieContainer, 
            Ocelot会为每个下游服务缓存HttpClient。
            这意味着对DownstreamService的所有请求都将共享相同的cookie
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.HttpHandlerOptions.UseTracing">
            <summary>
            是否使用跟踪
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.HttpHandlerOptions.UseProxy">
            <summary>
            是否使用代理
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.HttpHandlerOptions.MaxConnectionsPerServer">
            <summary>
            这将控制内部HttpClient将打开多少个连接。这可以在Route或全局级别设置。
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.LoadBalancerOptions">
            <summary>
            Ocelot可以为每条路由在可用的下游服务之间进行负载平衡。这意味着您可以扩展您的下游服务，Ocelot可以有效地使用它们
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.LoadBalancerOptions.Type">
            <summary>
            可用的负载均衡器类型
            LeastConnection:跟踪哪些服务正在处理请求，并将新请求发送给现有请求最少的服务。算法状态并不分布在Ocelot的集群中
            RoundRobin:循环可用的服务并发送请求。算法状态并不分布在Ocelot的集群中
            NoLoadBalancer:从配置或服务发现中获取第一个可用服务
            CookieStickySessions :使用cookie将所有请求粘贴到特定的服务器
            Custom Load Balancers:自定义类型，需要实现ILoadBalancer
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.LoadBalancerOptions.Key">
            <summary>
            Key:这是您希望用于粘滞会话的cookie的密钥
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.LoadBalancerOptions.Expiry">
            <summary>
            这是您希望会话被卡住的毫秒数
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.OcelotGlobalConfigurationNode">
            <summary>
            Ocelot全局配置节点
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotGlobalConfigurationNode.ServiceDiscoveryProvider">
            <summary>
            服务发现
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotGlobalConfigurationNode.RequestIdKey">
            <summary>
            请求id
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotGlobalConfigurationNode.RateLimitOptions">
            <summary>
            限流配置
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.OcelotRoot">
            <summary>
            Ocelot配置
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRoot.Routes">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRoot.GlobalConfiguration">
            <summary>
            全局配置
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode">
            <summary>
            Ocelot路由节点配置
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.DownstreamPathTemplate">
             <summary>
             下游的路由模板，即真实处理请求的路径模板 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.UpstreamPathTemplate">
             <summary>
             下游的路由模板，即真实处理请求的路径模板 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.DownstreamHttpMethod">
            <summary>
            下游请求的http方法
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.UpstreamHttpMethod">
             <summary>
             上游请求的http方法（数组：GET、POST、PUT） 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.RequestIdKey">
             <summary>
             请求Id 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.RouteIsCaseSensitive">
             <summary>
             开启上下游路由模板大小写匹配 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.ServiceName">
             <summary>
              服务名 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.DownstreamScheme">
             <summary>
             请求的方式，如：http,htttps 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.DownstreamHostAndPorts">
            <summary>
            下游请求地址和端口
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.LoadBalancerOptions">
            <summary>
            负载均衡
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.OcelotRouteNode.DelegatingHandlers">
            <summary>
            委托
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.QoSOptions">
            <summary>
            Quality of Service
            Ocelot当前只支持一个QoS能力。
            如果您想在向下游服务发出请求时使用断路器，
            则可以在每个路由的基础上进行设置。它使用了一个叫做Polly的很棒的.net库。
            Install-Package Ocelot.Provider.Polly
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.QoSOptions.Enabled">
            <summary>
            流量调控开启
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.QoSOptions.ExceptionsAllowedBeforeBreaking">
            <summary>
            要实现此规则，必须对ExceptionsAllowedBeforeBreaking设置一个大于0的数字
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.QoSOptions.DurationOfBreak">
            <summary>
            断路时间是指断路器被跳闸后将保持1秒的开启状态
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.QoSOptions.TimeoutValue">
            <summary>
            表示如果一个请求超过5秒，它将自动超时。
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.RateLimitOptions">
            <summary>
            Ocelot支持上游请求的速率限制，这样下游服务就不会过载
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.RateLimitOptions.ClientWhitelist">
            <summary>
            这是一个包含客户端白名单的数组。这意味着该数组中的客户端将不受速率限制的影响
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.RateLimitOptions.EnableRateLimiting">
            <summary>
            此值指定启用端点速率限制
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.RateLimitOptions.Period">
            <summary>
            该值指定限制适用的时间段，如1s、5m、1h、1d等。
            如果在此时间段内发出的请求超过限制，则需要等待PeriodTimespan结束后再发出另一个请求
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.RateLimitOptions.PeriodTimespan">
            <summary>
            这个值指定我们可以在特定的秒数后重试
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.RateLimitOptions.Limit">
            <summary>
            此值指定客户端在指定时间段内可以发出的最大请求数
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.Options.Ocelot.ServiceDiscoveryProviderOptions">
            <summary>
            Ocelot允许您指定一个服务发现提供程序，并使用它来为Ocelot转发请求的下游服务找到主机和端口。目前，
            这只在GlobalConfiguration部分中得到支持，
            这意味着相同的服务发现提供者将用于您在Route级别指定ServiceName的所有路由
            Install-Package Ocelot.Provider.Consul
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.ServiceDiscoveryProviderOptions.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.ServiceDiscoveryProviderOptions.Scheme">
            <summary>
            Http协议（http,https） 
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.ServiceDiscoveryProviderOptions.Host">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.ServiceDiscoveryProviderOptions.Token">
            <summary>
            如果您正在使用ACL与Consul Ocelot支持添加X-Consul-Token头。为了使其工作，您必须添加下面的附加属性
            Ocelot将把这个令牌添加到Consul客户端，用于发出请求，然后用于每个请求
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.ServiceDiscoveryProviderOptions.ConfigurationKey">
            <summary>
            配置key
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.ServiceDiscoveryProviderOptions.PollingInterval">
            <summary>
            轮询间隔以毫秒为单位，告诉Ocelot多久调用Consul更改一次服务配置
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.Options.Ocelot.ServiceDiscoveryProviderOptions.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.PagedListResult`1">
            <summary>
            分页泛型集合
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Hx.Gateway.Core.PagedListResult`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.PagedListResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="items">数据集合</param>
            <param name="total">总条数</param>
        </member>
        <member name="M:Hx.Gateway.Core.PagedListResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="items">数据集合</param>
            <param name="total">总条数</param>
            <param name="page">当前页码</param>
            <param name="pageSize">每页条数</param>
        </member>
        <member name="P:Hx.Gateway.Core.PagedListResult`1.Page">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.PagedListResult`1.PageSize">
            <summary>
            页容量
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.PagedListResult`1.Total">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.PagedListResult`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.PagedListResult`1.Items">
            <summary>
            当前页集合
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.PagedListResult`1.HasPrevPage">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.PagedListResult`1.HasNextPage">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.SqlSugarConfigProvider">
            <summary>
            SqlSugar配置初始化
            </summary>
        </member>
        <member name="F:Hx.Gateway.Core.SqlSugarConfigProvider.Assemblies">
            <summary>
            应用有效程序集
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarConfigProvider.SetAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            设置实体所在的程序集
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.SqlSugarConfigProvider.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarConfigProvider.GetTypes(System.Reflection.Assembly)">
            <summary>
            加载程序集中的所有类型
            </summary>
            <param name="ass"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarConfigProvider.SetDbConfig(Hx.Gateway.Core.Options.DbConnectionConfig)">
            <summary>
            配置连接属性
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarConfigProvider.SetAopLog(SqlSugar.ISqlSugarClient)">
            <summary>
            配置Aop日志
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarConfigProvider.InitDatabase(SqlSugar.ISqlSugarClient,Hx.Gateway.Core.Options.DbConnectionConfig)">
            <summary>
            初始化数据库和种子数据
            DbConnectionConfig需开启相应的开关
            </summary>
            <param name="dbProvider"></param>
            <param name="config"></param>
        </member>
        <member name="T:Hx.Gateway.Core.SqlSugarPagedExtensions">
            <summary>
            分页拓展类
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarPagedExtensions.ToPagedList``2(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            分页拓展
            </summary>
            <param name="query"><see cref="T:SqlSugar.ISugarQueryable`1"/>对象</param>
            <param name="pageIndex">当前页码，从1开始</param>
            <param name="pageSize">页码容量</param>
            <param name="expression">查询结果 Select 表达式</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarPagedExtensions.ToPagedList``1(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页拓展
            </summary>
            <param name="query"><see cref="T:SqlSugar.ISugarQueryable`1"/>对象</param>
            <param name="pageIndex">当前页码，从1开始</param>
            <param name="pageSize">页码容量</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarPagedExtensions.ToPagedListAsync``2(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            分页拓展
            </summary>
            <param name="query"><see cref="T:SqlSugar.ISugarQueryable`1"/>对象</param>
            <param name="pageIndex">当前页码，从1开始</param>
            <param name="pageSize">页码容量</param>
            <param name="expression">查询结果 Select 表达式</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarPagedExtensions.ToPagedListAsync``1(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页拓展
            </summary>
            <param name="query"><see cref="T:SqlSugar.ISugarQueryable`1"/>对象</param>
            <param name="pageIndex">当前页码，从1开始</param>
            <param name="pageSize">页码容量</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarPagedExtensions.ToPagedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            分页拓展
            </summary>
            <param name="list">集合对象</param>
            <param name="pageIndex">当前页码，从1开始</param>
            <param name="pageSize">页码容量</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarPagedExtensions.CreateSqlSugarPagedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            创建 <see cref="T:Hx.Gateway.Core.PagedListResult`1"/> 对象
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="items">分页内容的对象集合</param>
            <param name="total">总条数</param>
            <param name="pageIndex">当前页码，从1开始</param>
            <param name="pageSize">页码容量</param>
            <returns></returns>
        </member>
        <member name="T:Hx.Gateway.Core.ISqlSugarEntitySeedData`1">
            <summary>
            实体种子数据接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarEntitySeedData`1.HasData">
            <summary>
            种子数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hx.Gateway.Core.ISqlSugarRepository">
            <summary>
            非泛型 SqlSugar 仓储
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="P:Hx.Gateway.Core.ISqlSugarRepository.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.ISqlSugarRepository.Ado">
            <summary>
            原生 Ado 对象
            </summary>
        </member>
        <member name="T:Hx.Gateway.Core.ISqlSugarRepository`1">
            <summary>
            SqlSugar 仓储接口定义
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Hx.Gateway.Core.ISqlSugarRepository`1.Entities">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.ISqlSugarRepository`1.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.ISqlSugarRepository`1.Ado">
            <summary>
            原生 Ado 对象
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Single(System.Object)">
            <summary>
            通过主键获取实体
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.ToList">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.ToListAsync">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Insert(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Insert(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.InsertReturnIdentity(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.InsertAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.InsertAsync(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.InsertReturnIdentityAsync(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Update(`0)">
            <summary>
            更新一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Update(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.UpdateAsync(`0)">
            <summary>
            更新一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.UpdateAsync(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Delete(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Delete(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Delete(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.DeleteAsync(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.DeleteAsync(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.DeleteAsync(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="condition"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.AsQueryable">
            <summary>
            构建查询分析器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.AsEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.AsAsyncEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.ISqlSugarRepository`1.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TChangeEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Hx.Gateway.Core.SqlSugarRepository">
            <summary>
            非泛型 SqlSugar 仓储
            </summary>
        </member>
        <member name="F:Hx.Gateway.Core.SqlSugarRepository._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository.#ctor(System.IServiceProvider,SqlSugar.ISqlSugarClient)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
            <param name="db"></param>
        </member>
        <member name="P:Hx.Gateway.Core.SqlSugarRepository.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.SqlSugarRepository.Ado">
            <summary>
            原生 Ado 对象
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="T:Hx.Gateway.Core.SqlSugarRepository`1">
            <summary>
            SqlSugar 仓储实现类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="F:Hx.Gateway.Core.SqlSugarRepository`1._sqlSugarRepository">
            <summary>
            非泛型 SqlSugar 仓储
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.#ctor(Hx.Gateway.Core.ISqlSugarRepository)">
            <summary>
            构造函数
            </summary>
            <param name="sqlSugarRepository"></param>
        </member>
        <member name="P:Hx.Gateway.Core.SqlSugarRepository`1.Entities">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.SqlSugarRepository`1.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Hx.Gateway.Core.SqlSugarRepository`1.Ado">
            <summary>
            原生 Ado 对象
            </summary>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Single(System.Object)">
            <summary>
            通过主键获取实体
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.ToList">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.ToListAsync">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Insert(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Insert(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.InsertReturnIdentity(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="insertObj"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.InsertAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.InsertAsync(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.InsertReturnIdentityAsync(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Update(`0)">
            <summary>
            更新一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Update(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.UpdateAsync(`0)">
            <summary>
            更新一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.UpdateAsync(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Delete(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Delete(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Delete(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.DeleteAsync(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.DeleteAsync(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.DeleteAsync(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="condition"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.AsQueryable">
            <summary>
            构建查询分析器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.AsEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.AsAsyncEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Gateway.Core.SqlSugarRepository`1.Change``1">
            <summary>
            切换仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="T:Hx.Sdk.Sqlsugar.IgnoreSeedUpdateAttribute">
            <summary>
            忽略更新种子数据特性
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SqlSugarServiceCollectionExtensions">
            <summary>
            SqlSugar 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqlSugarServiceCollectionExtensions.AddSqlSugar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Hx.Gateway.Core.Options.DbConnectionConfig})">
            <summary>
            添加 SqlSugar 拓展
            </summary>
            <param name="services"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqlSugarServiceCollectionExtensions.AddSqlSugar(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加 SqlSugar 拓展
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
    </members>
</doc>
