@page "/project"

<PageTitle>项目管理</PageTitle>
<Card Class="search-box-card" Hoverable>
    <Form Model="_pageInput" >
        <Row Gutter="@gutter">
            <Col Xs="16" Sm="12" Md="8" Lg="6" Xl="6" Xxl="4">
                <FormItem Label="状态" LabelAlign="@(AntLabelAlignType.Right)">
                    <Select TItem="StatusEnum?"
                            TItemValue="StatusEnum?"
                            @bind-Value="@_pageInput.Status"
                            Placeholder="请选择状态"
                            AllowClear>
                        <SelectOptions>
                            <SelectOption TItemValue="StatusEnum?" TItem="StatusEnum?" Value="@(StatusEnum.Enable)" Label="启用" />
                            <SelectOption TItemValue="StatusEnum?" TItem="StatusEnum?" Value="@(StatusEnum.Disable)" Label="禁用" />
                        </SelectOptions>
                    </Select>
                </FormItem>
            </Col>
            <Col>
                <FormItem>
                <Space>
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary" OnClick="OnQuery">查询</Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Type="@(ButtonType.Default)" OnClick="OnAdd">新增</Button>
                    </SpaceItem>
                </Space>
                </FormItem>
            </Col>
        </Row>
    </Form>
</Card>

<Card>
    <Table @ref="_table"
           TItem="PageProjectOutput"
           DataSource="@_data.Items"
           Total="_data.Total"
           Size="@(TableSize.Small)"
           @bind-PageIndex="_pageInput.Page"
           @bind-PageSize="_pageInput.PageSize">
        <Selection Key="@(context.Id.ToString())" />
        <PropertyColumn Align="@ColumnAlign.Center" Property="c=>c.Id" Title="标识" Hidden />
        <PropertyColumn Align="@ColumnAlign.Center" Property="c=>c.Code" Title="项目编码" />
        <PropertyColumn Align="@ColumnAlign.Center" Property="c=>c.Name" Title="项目名称" />
        <Column Align="@ColumnAlign.Center" @bind-Field="@context.Status" Title="状态">
            <Switch Checked="@(context.Status == StatusEnum.Enable)" Disabled CheckedChildren="启用" UnCheckedChildren="禁用"></Switch>
        </Column>
        <PropertyColumn Align="@ColumnAlign.Center" Property="c=>c.CreateTime" Format="yyyy-MM-dd HH:mm:ss" Title="创建时间" />
        <ActionColumn Title="操作" Align="@ColumnAlign.Center">
            <Space>
            <SpaceItem><Button Danger OnClick="()=>OnEdit(context)" Size="small">编辑</Button></SpaceItem>
            <SpaceItem><Button Danger OnClick="()=>OnDelete(context.Id)" Size="small">删除</Button></SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</Card>
                    <Modal Title="@(_isEdit?"编辑项目":"添加项目")"
                        Centered
       Visible="@_visible"
       OnOk="@(() => {_form.Submit();})"
       OnCancel="@(() => {_visible = false;})">
                    <Form Model="@_addModel"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          @ref="@_form">
                    <FormItem Label="项目编码">
                    <Input @bind-Value="@(context.Code)" />
                    </FormItem>
                    <FormItem Label="项目名称">
                        <Input @bind-Value="@(context.Name)" />
                    </FormItem>
                    <FormItem Label="状态">
                        <Switch @bind-Value="_isCheck" OnChange="@((c) => {_addModel.Status=c?StatusEnum.Enable:StatusEnum.Disable;})" CheckedChildren="启用" UnCheckedChildren="禁用" />
                    </FormItem>
                    </Form>
                    </Modal>
<style>
    [data-theme='compact'] .ant-advanced-search-form,
    .ant-advanced-search-form {
        padding: 24px;
        background: #fbfbfb;
        border: 1px solid #d9d9d9;
        border-radius: 2px;
    }

        [data-theme='compact'] .ant-advanced-search-form .ant-form-item,
        .ant-advanced-search-form .ant-form-item {
            display: flex;
        }

        [data-theme='compact'] .ant-advanced-search-form .ant-form-item-control-wrapper,
        .ant-advanced-search-form .ant-form-item-control-wrapper {
            flex: 1;
        }
</style>


@using System.Text.Json;
@using System.ComponentModel;
@using AntDesign.TableModels;
@using Hx.Gateway.Admin.Services.Projects.Dto;
@using Hx.Gateway.Admin.Services;
@using Hx.Gateway.Application.Services;
@using Hx.Gateway.Application.Services.Projects;
@inject IMessageService _message;
@code {
    [Inject]
    ProjectService ProjectService { get; set; }
    PageProjectInput _pageInput = new PageProjectInput();
    SaveProjectInput _addModel;
    bool _visible = false;
    bool _isEdit = false;
    bool _isCheck = true;
    PagedListResult<PageProjectOutput> _data;
    IEnumerable<PageProjectOutput> selectedRows;
    ITable _table;
    AntDesign.Internal.IForm _form;
    Dictionary<string, int> gutter = new()
    {
        ["xs"] = 4,
        ["sm"] = 8,
        ["md"] = 12,
        ["lg"] = 16,
        ["xl"] = 24,
        ["xxl"] = 32
    };

    protected override async Task OnInitializedAsync()
    {
        _data = await GetPageProjectAsync();
    }

    private async Task<PagedListResult<PageProjectOutput>> GetPageProjectAsync()
    {
        return await ProjectService.GetPageProjectAsync(_pageInput);
    }

    private async Task OnQuery(MouseEventArgs? e)
    {
        _data = await GetPageProjectAsync();
    }

    private bool OnDelete(Guid id)
    {
        return true;
    }

    private void OnAdd(MouseEventArgs e)
    {
        _addModel = new SaveProjectInput();
        _isCheck = true;
        _isEdit = false;
        _visible = true;
    }

    private void OnEdit(PageProjectOutput input)
    {
        _addModel = new SaveProjectInput();
        _addModel.Id = input.Id;
        _addModel.Code = input.Code;
        _addModel.Name = input.Name;
        _addModel.Status = input.Status;
        _isCheck = _addModel.Status == StatusEnum.Enable ? true : false;
        _isEdit = true;
        _visible = true;
    }

    private async Task OnFinish(EditContext editContext)
    {
        var result = await ProjectService.SaveProjectAsync(_addModel);
        if (result)
        {
            _visible = false;
            await _message.Info(_isEdit ? "编辑程功" : "添加成功");
            await OnQuery(null);
        }
    }
}
